// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// myPearson
double myPearson(NumericVector x, NumericVector y);
RcppExport SEXP segmenTier_myPearson(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(myPearson(x, y));
    return rcpp_result_gen;
END_RCPP
}
// clusterCor_c
NumericMatrix clusterCor_c(NumericMatrix data, NumericMatrix clusters);
RcppExport SEXP segmenTier_clusterCor_c(SEXP dataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterCor_c(data, clusters));
    return rcpp_result_gen;
END_RCPP
}
// clusterMaxCor_c
NumericVector clusterMaxCor_c(NumericMatrix data, NumericMatrix clusters, float mincor, int warn);
RcppExport SEXP segmenTier_clusterMaxCor_c(SEXP dataSEXP, SEXP clustersSEXP, SEXP mincorSEXP, SEXP warnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< float >::type mincor(mincorSEXP);
    Rcpp::traits::input_parameter< int >::type warn(warnSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterMaxCor_c(data, clusters, mincor, warn));
    return rcpp_result_gen;
END_RCPP
}
// scoreicor_c
double scoreicor_c(int k, int i, int c, NumericVector seq, int M, NumericMatrix csim);
RcppExport SEXP segmenTier_scoreicor_c(SEXP kSEXP, SEXP iSEXP, SEXP cSEXP, SEXP seqSEXP, SEXP MSEXP, SEXP csimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type csim(csimSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreicor_c(k, i, c, seq, M, csim));
    return rcpp_result_gen;
END_RCPP
}
// scorecor_c
double scorecor_c(int k, int i, int c, NumericVector seq, int M, NumericMatrix csim);
RcppExport SEXP segmenTier_scorecor_c(SEXP kSEXP, SEXP iSEXP, SEXP cSEXP, SEXP seqSEXP, SEXP MSEXP, SEXP csimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type csim(csimSEXP);
    rcpp_result_gen = Rcpp::wrap(scorecor_c(k, i, c, seq, M, csim));
    return rcpp_result_gen;
END_RCPP
}
// scorecls_c
double scorecls_c(int k, int i, int c, NumericVector seq, int M, int a);
RcppExport SEXP segmenTier_scorecls_c(SEXP kSEXP, SEXP iSEXP, SEXP cSEXP, SEXP seqSEXP, SEXP MSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(scorecls_c(k, i, c, seq, M, a));
    return rcpp_result_gen;
END_RCPP
}
// ccSMicor
NumericVector ccSMicor(NumericVector seq, int c, int M, int Mn, NumericMatrix csim);
RcppExport SEXP segmenTier_ccSMicor(SEXP seqSEXP, SEXP cSEXP, SEXP MSEXP, SEXP MnSEXP, SEXP csimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Mn(MnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type csim(csimSEXP);
    rcpp_result_gen = Rcpp::wrap(ccSMicor(seq, c, M, Mn, csim));
    return rcpp_result_gen;
END_RCPP
}
// ccSMccor
NumericVector ccSMccor(NumericVector seq, int c, int M, int Mn, NumericMatrix csim);
RcppExport SEXP segmenTier_ccSMccor(SEXP seqSEXP, SEXP cSEXP, SEXP MSEXP, SEXP MnSEXP, SEXP csimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Mn(MnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type csim(csimSEXP);
    rcpp_result_gen = Rcpp::wrap(ccSMccor(seq, c, M, Mn, csim));
    return rcpp_result_gen;
END_RCPP
}
// ccSMncor
NumericVector ccSMncor(NumericVector seq, int c, int M, int Mn, NumericMatrix csim);
RcppExport SEXP segmenTier_ccSMncor(SEXP seqSEXP, SEXP cSEXP, SEXP MSEXP, SEXP MnSEXP, SEXP csimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Mn(MnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type csim(csimSEXP);
    rcpp_result_gen = Rcpp::wrap(ccSMncor(seq, c, M, Mn, csim));
    return rcpp_result_gen;
END_RCPP
}
// ccSMcls
NumericVector ccSMcls(NumericVector seq, int c, int M, int Mn, int csim);
RcppExport SEXP segmenTier_ccSMcls(SEXP seqSEXP, SEXP cSEXP, SEXP MSEXP, SEXP MnSEXP, SEXP csimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Mn(MnSEXP);
    Rcpp::traits::input_parameter< int >::type csim(csimSEXP);
    rcpp_result_gen = Rcpp::wrap(ccSMcls(seq, c, M, Mn, csim));
    return rcpp_result_gen;
END_RCPP
}
// calculateTotalScore
List calculateTotalScore(NumericVector seq, NumericVector C, List SM, String multi, int verb);
RcppExport SEXP segmenTier_calculateTotalScore(SEXP seqSEXP, SEXP CSEXP, SEXP SMSEXP, SEXP multiSEXP, SEXP verbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< List >::type SM(SMSEXP);
    Rcpp::traits::input_parameter< String >::type multi(multiSEXP);
    Rcpp::traits::input_parameter< int >::type verb(verbSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateTotalScore(seq, C, SM, multi, verb));
    return rcpp_result_gen;
END_RCPP
}
